# -*- coding: utf-8 -*-
"""Wine_quality 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hg8MO-uvcF0ppFc_1JwjVXP-nHFwY4DM
"""

import numpy as np
import pandas as pd

df=pd.read_csv("winequality-red.csv")
df.head()

df.rename(columns={'fixed acidity': 'fixed_acidity', 'volatile acidity': 'volatile_acidity','citric acid':'citric_acid','residual sugar':'residual_sugar','free sulfur dioxide':'free_sulfur_dioxide','total sulfur dioxide':'total_sulfur_dioxide'}, inplace=True)

df.info()

df.isnull().sum()

df.corr()

df.drop(['residual_sugar','free_sulfur_dioxide','pH'],axis=1,inplace=True)

df

df.skew()

df.sulphates=np.log(df['sulphates'])

df['fixed_acidity']=np.log(df['fixed_acidity'])

iq1=df['chlorides'].quantile(0.25)
iq2=df['chlorides'].quantile(0.75)
iq1

iq2

df['chlorides']=np.where(df['chlorides']<iq1,iq1,df['chlorides'])
df['chlorides']=np.where(df['chlorides']>iq2,iq2,df['chlorides'])

iq1=df['total_sulfur_dioxide'].quantile(0.25)
iq2=df['total_sulfur_dioxide'].quantile(0.75)
iq1

iq2

df['total_sulfur_dioxide']=np.where(df['total_sulfur_dioxide']<iq1,iq1,df['total_sulfur_dioxide'])
df['total_sulfur_dioxide']=np.where(df['total_sulfur_dioxide']>iq2,iq2,df['total_sulfur_dioxide'])

df.skew()

"""##Creating a Model"""

x=df.iloc[:,0:8]
y=df.iloc[:,8]
x.head()

y

"""###Training a model"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.95,random_state=1)

print("Training data",x_train.shape)

print("Training data",x_test.shape)

from sklearn.ensemble import RandomForestClassifier

classifier=RandomForestClassifier(random_state=0,max_depth=3)
classifier.fit(x_train,y_train)

y_pred=classifier.predict(x_test)

from sklearn.metrics import accuracy_score

accuracy_score(y_test,y_pred)

"""###Saving the trained model"""

import pickle

filename='trained_model.sav'
pickle.dump(classifier,open(filename,'wb'))

loaded_model=pickle.load(open('trained_model.sav','rb'))

input_data=(6.0,0.310,0.47,0.067,42.0,0.99549,0.66,11.0)
input_array=np.asarray(input_data)
data_reshape=input_array.reshape(1,-1)
prediction=classifier.predict(data_reshape)
print(prediction)
if(prediction[0]>5):
  print("Good Quality Wine")
else:
  print("Bad Quality Wine")

